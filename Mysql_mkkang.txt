MySQL



2. 설치와 설정


2.1 MySQL 서버 설치
 - Tar 또는 Zip으로 압축된 버전
 - OS별 인스톨러
 - 소스코드 빌드

2.1.1 버전과 에디션 선택
 - 가능한 최신 버전으로 선택
 - 메이저 버전 업그레이드 시 최소 패치 버전 15~20번 이상 릴리즈 된 버전으로 선택
 - 5.5버전부터 커뮤니티와 엔터프라이즈 에디션의 기능이 달라짐
 - 핵심내용은 동일하며 특정 부가 기능들만 엔터프라이즈 에디션에 포함되는 방식
 - 엔터프라이즈 에디션에서만 지원되는 기능
	Thread Pool
	Enterprise Audit
	Enterprise TDE(Master Key 관리)
	Enterprise Authentication
	Enterprise Firewall
	Enterprise Backup
	MySQL 기술지원
 - Percona에서 출시하는 Percona Server 백업 및 모니터링 도구 혹은 플러그인을 활용하면 커뮤니티의 부족한 부분 보완 가능

2.1.2 MySQL 설치

  1. 리눅스 서버의 Yum인스톨러 설치
	MySQL 소프트웨어 Repository 등록을 위해 RPM설치 파일을 직접 받아서 설치
	설치 순서
	  1. Yum Repository 정보를 등록
	  2. Yum Repository가 등록되면 MySQL 설치용 RPM파일들이 저장된 경로를 가진 파일이 생성
	  3. Yum 인스톨러 명령을 이용해 버전별로 설치 가능한 MySQL 소프트웨어 목록 확인 가능
	  4. yum search 명령으로 어떤 RPM패키지가 있는지 확인 가능하며 yum --showduplicates list 명령으로 설치 가능한 버전 확인 가능
	  5. 설정 파일과 시스템 테이블을 준비하는 과정을 거쳐야 시작 가능

  2. 리눅스 서버에서 Yum인스톨러 없이 RPM파일로 설치
	설치 순서
	  1. RPM 패키지 파일들을 직접 다운로드
	  2. 의존 관계 순서대로 설치
		- Development Libraries
		- Shared Libraries
		- Compatibility Libraries
		- MySQL Configuration
		- MySQL Server
		- Client Utilities


2.2 MySQL 서버의 시작과 종료

2.2.1 설정 파일 및 데이터 파일 준비
 - 리눅스는 설치 후 트랜잭션 로그 파일과 시스템 테이블이 준비되어 있지 않음
 - 서비스용으로 설치한 경우 /etc/my.conf 설정 필요
 - 초기 데이터 파일과 트랜잭션 로그 파일 생성
	linux> mysqld --defaults-file=/etc/my.conf --initialize-insecure

2.2.2 시작과 종료
 - RPM 패키지로 설치했다면 자동으로 mysqld.service 파일이 생성
 - systemctl 유틸리티를 이용해 기동 및 종료가 가능
  	linux> systemctl start mysqld
  	linux> systemctl stop mysqld
 - 설정 파일 my.cnf의 'mysqld_safe' 섹션의 설정을 참조해서 서버를 실행시키려면 mysqld_safe 스크립트를 이용하여 실행해야 함

2.2.3 서버 연결 테스트
 - MySQL 소켓 파일을 이용해 접속하는 예제
	linux> mysql -uroot -p --host=localhost --socket=/tmp/mysql.sock
 - TCP/IP를 통해 로컬 호스트로 접속하는 예제
	linux> mysql -uroot -p --host=127.0.0.1 --port =3306
 - SHOW DATABASES 명령으로 데이터베이스 목록 확인 가능


2.4 서버 설정
 - 단 하나의 설정파일(my.cnf)만 사용
 - 여러 디렉터리를 순차 탐색하며 처음 발견된 설정 파일을 사용
 - shell> mysql --help 명령어로 설정 파일 탐색 순서 확인 가능

2.4.1 설정 파일의 구성
 - 하나의 설정 파일에 여러 설정 그룹을 담을 수 있고 보통 실행 프로그램 이름을 그룹명으로 사용

2.4.2 MySQL 시스템 변수의 특징
 - MySQL 서버는 기동될 때 설정 파일의 내용을 읽어 메모리와 작동 방식을 초기화하며 접속한 사용자를 제어하기 위한 값을 별도로 저장
 - 위에 저장된 값을 시스템 변수라 하며 SHOW VARIABLES 또는 SHOW GLOBAL VARIABLES 라는 명령오로 확인 가능
 - 시스템 변수가 가진 5가지 속성의 의미
	1. Cmd-Line: MySQL 서버의 명령행 인자로 설정 가능 여부
	2. Option file: MySQL 설정 파일로 제어가능 여부
	3. System Var: 시스템 변수 여부
		* 8.0버전에서는 모든 시스템 변수는 _를 구분자로 사용하며 명령핸 옵션으로만 사용가능한 설정은 -를 구분자로 사용
	4. Var Scope: 시스템 변수의 적용 범위
	5. Dynamic: 시스템 변수가 동적인지 정적인지 구분하는 변수
		* 서버가 기동 중인 상태에서 변경이 가능하냐에 따라 동적인지 정적인지 나뉨

2.4.3 글로벌 변수와 세션 변수
 - 일반적으로 세션별로 적용되는 시스템 변수는 글로벌 변수 뿐만 아니라 세션 변수에도 동시에 존재
	* Var Scope에 Both로 표시
 - 글로벌 범위의 시스템 변수는 하나의 MySqL 서버 인스턴스에서 전체적으로 영향을 미치는 시스템 변수
 - 글로벌 범위의 시스템 변수는 주로 서버 자체에 관련된 설정
 - 세션 범위의 시스템 변수는 MySQL 클라이언트가 MySQL 서버에 접속할 때 기본으로 부여하는 옵션의 기본값을 제어하는데 사용



3. 사용자 및 권한


3.1 사용자 식별
 - MySQL은 계정 뿐 아니라 사용자의 접속 지범도 계정의 일부여서 계정을 언급할 때 아이디와 호스트를 함께 명시해야 함
 - 계정의 호스트만 접속 가능하므로 모든 외부 컴퓨터에서 접속가능한 계정을 생성하려면 호스트에 % 문자로 대체해야 함


3.2 사용자 계정 관리

3.2.1 시스템 계정과 일반 계정
  - MySQL 8.0부터 SYSTEM_USER 권한 보유에 따라 시스템 계정과 일반 계정으로 구분
  - 시스템 계정은 백그라운드 스레드와 무관하며 데이터베이스 서버 관리자를 위한 계정
	1. 계정 관리
	2. 다른 세션 또는 그 세션에서 실행준인 쿼리의 강제 종료
	3. 스토어드 프로그램 생성 시 DEFINDER를 타 사용자로 설정
  - 일반 계정은 응용프로그램이나 개발을 위한 계정
  - 내장된 계정들 (삭제하지 않도록 주의)
	1. 'mysql.sys'@'localhost' : MySQL 8.0부터 기본으로 내장된 sys 스키마의 객체들의 DEFINER로 사용되는 계정
	2. 'mysql.session'@'localhost' : MySQL 플러그인이 서버로 접근할 때 사용되는 계정
	3. 'mysql.infoschema'@'localhost' : information_schema에 정의된 뷰의 DEFINER로 사용되는 계정

3.2.2 계정 생성
  - 8.0버전부터 CREATE USER 명령으로 권한 부여는 GRANT 명령으로 구분해서 실행.


3.4 권한
  - 글로벌 권한 : 데이터베이스나 테이블 이외의 객체에 적용되는 권한
  - 객체 권한 : 데이터베이스나 테이블을 제어하는데 필요한 권한
  - 동적 권한 : MySQL 서버가 시작되면서 동적으로 생성하는 권한
  - 객체 권한은 권한을 부여할 때 반드시 특정 객체를 명시해야 하며 글로벌 권한은 특정 객체를 명시하면 안됨
  - 특정 객체에 ALL권한이 부여되면 해당 객체에 적용될 수 있는 모든 객체 권한을 부여
  - 글로벌로 ALL이 사용되면 글로벌 수준에서 가능한 모든 권한을 부여



4. 아키텍처


4.1 MySQL 엔진 아키텍처
  - MySQL 엔진과 스토리지 엔진으로 구분

4.1.1 MySQL의 전체 구조

4.1.1.1 MySQL 엔진
  - 커넥션 핸들러와 SQL 파서, 전처리기, 옵티마이저가 중심
	* 커넥션 핸들러: 접속 및 쿼리 요청 처리
	* 옵티마이저: 쿼리의 최적화된 실행
  - 표준 SQL(ANSI SQL) 문법 지원.
  - SQL 문장 분석 및 최적화

4.1.1.2 스토리지 엔진
  - 디스크 스토리지에서 실제 데이터를 읽어오거나 저장하는 역할
  - 하나의 MYSQL 엔진에 여러 개의 스토리지 엔진 사용 가능
	* MyISAM 스토리지엔진 : 키캐시
	* InnoDB 스토리지 엔진 : InnoDB 버퍼 풀

4.1.1.3 핸들러 API
  - MYSQL 엔진 쿼리 실행기에서 데이터 읽기 쓰기 시 스토리지 엔진에 요청하는 API

4.1.2 MySQL 스레딩 구조
  - MySQL서버는 프로세스 기반이 아닌 스레드 기반으로 작동
  - 포그라운드 스레드와 백그라운드 스레드로 구분

4.1.2.1 포그라운드 스레드 (클라이언트 스레드)
  - 최소한 MYSQL서버에 접속한 클라이언트 수만큼 존재
  - 각 클라이언트 사용자가 요청하는 쿼리 문장을 처리
  - 사용자가 커넥션을 종료하면 스레드는 스레드 캐시로 되돌아감.
	* 이미 일정 개수(시스템 설정) 이상 대기중이면 스레드가 종료됨
  - MYSQL 데이터 버퍼나 캐시로부터 데이터를 가져옴.
	* 버퍼나 캐시에 없는 경우 직접 디스크나 인덱스 파일에서 데이터를 읽어옴
  - MyISAM테이블은 포그라운드 스레드가 디스크 쓰기 작업까지 처리.
  - InnoDB테이블은 데이터 버퍼나 캐시까지만 포그라운드 스레드가 처리
	* 나머지 버퍼부터 디스크기록은 백그라운드 스레드가 처리

4.1.2.2백그라운드 스레드
  - InnoDB는 아래 작업이 처리됨
	1. Insert Buffer를 병합하는 스레드
	2. 로그를 디스크로 기록하는 스레드
	3. innoDB버퍼 풀의 데이터를 디스크에 기록하는 스레드
	4. 데이터를 버퍼로 읽어오는 스레드
	5. 잠금이나 데드락을 모니터링 하는 스레드
  - 5.5부터 데이터 쓰기 스레드와 데이터 읽기 스레드의 개수를 2개 이상 지정 가능.

4.1.3 메모리 할당 및 사용 구조
  - 글로벌 메모리 영역과 로컬 메모리 영역으로 구분

4.1.3.1 글로벌 메모리 영역
  - MYSQL 서버 실행되면 운영체제로부터 할당
  - 일반적으로 하나의 메모리 공간만 할당
	* 필요에 따라 여러 공간을 할당받을 수 있지만 스레드 수와 무관하며 모든 스레드에 의해 공유 됨
  - 대표적인 글로벌 메모리 영역
	- 테이블 캐시
	- InnoDB 버퍼 풀
	- InnoDB 어댑티브 해시 인덱스
	- InnoDB 리두 로그 버퍼

4.1.3.2 로컬 메모리 영역
  - 세션 메모리 영역이라고도 함
  - 클라이언트 스레드가 쿼리를 처리하는데 사용하는 메모리 영역
  - 각 클라이언트 스레드 별로 독립적으로 할당되며 공유되지 않음.
  - 적절한 메모리 공간을 설정하는 것이 중요.
  - 대표적인 로컬 메모리 영역
	- 정렬 버퍼
	- 조인 버퍼
	- 바이너리 로그 캐시
	- 네트워크 버퍼

4.1.4 플러그인 스토리지 엔진 모델
  - 기본적으로 제공되는 스토리지 엔진 외에 부가적인 기능을 제공하는 스토리지 엔진을 직접 개발 가능
  - MYSQL엔진은 핸들러를 통해 스토리지 엔진에 데이터 읽기 쓰기를 명령
  - 쉽게 다운로드해서 사용 가능하고 업그레이드 가능.
  - 플러그인 단점
	- 서버와 인터페이스 할 수 있고 플러그인끼리 통신 불가.
	- 서버의 변수나 함수를 직접 호출하기에 안전하지 않음. (캡슐화 불가)
	- 상호 의존 관계를 설정할 수 없어 초기화 어려움.

4.1.5 컴포넌트
  - 8.0부터 플러그인 대체 위해 지원
  - 위 플러그인 단점을 보완해서 구현

4.1.6 쿼리 실행 구조

4.1.6.1 쿼리 파서
  - 사용자 요청으로 들어온 쿼리 문장을 토큰으로 분리해 트리 형태의 구조로 만들어내는 작업
	* 토큰 – MYSQL이 인식할 수 있는 최소 단위의 어휘나 기호
4.1.6.2 전처리기
  - 파서 트리를 기반으로 쿼리 문장에 구조적인 문제점이 있는지 확인
4.1.6.3 옵티마이저
  - 사용자의 요청으로 들어온 쿼리 문장을 작은 비용으로 가장 빠르게 처리할지를 결정하는 역할
4.1.6.4 실행 엔진
  - 결정된 계획대로 각 핸들러에게 요청해서 받은 결과를 다른 핸글러에 요청하는 결결 역할.
4.1.6.5 핸들러 (스트로지 엔진)
  - 요청받은 데이터를 디스크로 저장하고 디스크로부터 읽어오는 역할

4.1.9 스레드 풀
  - 스레드 개수를 줄여 CPU가 제한된 개수의 스레드 처리에만 집중할 수 있게 해 서버의 자원 소모를 줄이는 목적
  - 스케줄링 과정에서 CPU 시간을 제대로 확보해야 함.
  - 제대로 컨트롤 된다면 불필요한 컨텍스트 스위치(Context switch)를 줄여서 오버헤드를 낮출 수 있음

4.1.10 트랜잭션 지원 메타데이터
  - 메타데이터 : 테이블의 구조 정보와 스토어드 프로그램 등의 정보
  - MySQL 8.0부터 메타데이터를 InnoDB의 테이블에 저장되도록 개선
  - 시스템 테이블과 데이터 딕셔너리 정보를 모아 mysql DB에 저장
  - mysql DB는 mysql.ibd라는 이름의 테이블스페이스에 저장
  - InnoDB가 아닌 MyISAM이나 CSV 등과 같은 스토리지 엔진은 여전히 메타 데이터를 저장할 공간이 필요
	* SDI 파일을 사용


4.2 InnoDB 스토리지 엔진 아키텍처
  - MySQL 스토리지 엔진 중 거의 유일하게 레코드 기반의 잠금을 제공
  - 높은 동시성 처리가 가능하고 안정적

4.2.1 프라이머리 키 (PK)에 의한 클러스터링
  - InnoDB 테이블들은 기본적으로 PK를 기준으로 클러스터링 되어 저장
  - PK 순서대로 디스크에 저장되며 세컨더리 인덱스는 레코드의 주소 대신 PK 값을 논리적인 주소로 사용
  - PK를 이용한 레인지 스캔 처리가 빠름

4.2.2 외래 키 (FK) 지원
  - InnoDB 스토리지 엔진 레벨에서 FK 기능 지원
  - InnoDB의 FK는 부모, 자식 테이블 모두 인덱스 생성이 필요하고 변경 시 not null 체크 하므로 데드락 발생할 수 있어 주의 필요

4.2.3 MVCC (Multi Version Concurrency Control)
  - 잠금을 사용하지 않는 일관된 읽기를 제공
  - 
  - 하나의 레코드에 대해 여러 개의 버전이 동시에 관리

4.2.4 잠금 없는 일관된 읽기 (Non-Locking Consistent Read)
  - InnoDB의 읽기 작업은 다른 트랜잭션이 가지고 있는 잠금을 기다리지 않고 읽기 작업이 가능
  - InnoDB는 Undo log를 이용해 이 기능을 제공
  - Undo log에 의한 성능저하 방지를 위해 시작된 트랜잭션은 빠르게 롤백이나 커밋 해주는 것이 좋음

4.2.5 자동 데드락 감지
  - 데드락 감지 스레드가 주기적으로 잠금 대기 그래프를 검사
  - 교착 상태에 빠진 트랜잭션들을 찾아 그 중 하나를 강제 종료
	* 트랜잭션 Undo log 양이 적은 대상이 강제로 종료됨

4.2.6 자동화된 장애 복구
  - 서버가 실행될 때 항상 자동 복구 수행
	* 이때 복구할 수 없는 손상이 있을 경우 종료.
  - 서버가 기동되고 테이블이 인식된다면 mysqldump를 이용해 데이터를 백업하고 DB와 테이블을 다시 생성

4.2.7 InnoDB 버퍼 풀
  - 디스크의 데이터 파일이나 인덱스 정보를 메모리에 캐시해 두는 공간
  - 쓰기 작업을 지연시켜 일괄 처리할 수 있게 버퍼 역할도 함

4.2.7.2 버퍼 풀의 구조
  - 버퍼 풀 공간을 페이지 크기의 조각으로 쪼개서 스토리지 엔진이 데이터를 필요로 할 때 해당 데이터 페이지를 각 조각에 저장
  - 페이지 크기 조각을 관리하기 위해 LRU (Least Recently Used) List, Flush List, Free List의 자료 구조를 관리
  - Free List : 사용자의 쿼리가 새롭게 디스크의 데이터 페이지를 읽어오는 경우 사용
  - LRU List : 디스크로부터 읽어온 페이지를 최대한 오랫동안 유지해서 디스크 읽기 최소화
  - Flush List : 더티 페이지의 변경 시점 기준의 페이지 목록을 관리
	* 더티페이지 : 디스크로 동기화되지 않은 데이터를 가진 데이터 페이지

4.2.7.4 버퍼 풀 플러시
  - 더티 페이지들을 디스크에 동기화 하기 위해 2개의 플러시 기능을 백그라운드로 실행
	- 플러시 리스트 플러시	
	- LRU 리스트 플러시

4.2.9 Undo Log
  - 트랜잭션과 결리 수준을 보장하기 위해 DML로 변경되기 이전 버전의 데이터를 별도로 백업
	* 트랜잭션 보장 : 트랜잭션이 롤백되면 트랜잭션에서 변경된 데이터를 이전 데이터로 복구
	* 격리 수준 보장 : 특정 커넥션에서 데이터를 변경하는 도중 다른 커넥션에서 데이터 조회시 변경 전 데이터로 조회

4.2.10 체인지 버퍼
  - 레코드가 INSERT되거나 UPDATE될 때 인덱스를 업데이트하는 작업도 필요
  - 인덱스 페이지가 버퍼 풀에 없으면 임시공간에 저장
	* 해당 임시공간이 체인지 버퍼
  - 중복여부를 체크해야하는 유니크 인덱스는 체인지 버퍼에 저장할 수 없음


